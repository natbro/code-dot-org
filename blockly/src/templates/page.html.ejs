<%
  var msg = require('../../locale/current/common');
  var hideRunButton = locals.hideRunButton || false;

  // shim window.orientation information on non-Safari to keep landscape mode, from https://gist.github.com/richtr/2966043

  !(function( window, undefined ) {
 
    var supportsOrientation = ( typeof window.orientation == 'number' && typeof window.onorientationchange == 'function' );
 
    // Do nothing if we don't need to shim
    if ( supportsOrientation ) return;
 
    /* START: requestAnimationFrame shim
     *
     * By: Eric MÃ¶ller
     * URL: http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
     */
    (function() {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelRequestAnimationFrame = window[vendors[x] +
            'CancelRequestAnimationFrame'];
        }
 
        if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() {
                callback(currTime + timeToCall);
            },
            timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
 
        if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
    } ());
 
    /* END: requestAnimationFrame shim */
 
    var cOrientationChange = function() {
 
        this.currentOrientationAngle = -1;
        this.lastOrientationAngle = -2;
 
        this.currentOrientationState = this.lastOrientationState = ( window.innerWidth > window.innerHeight ) ? 'landscape': 'portrait';
 
        var self = this;
 
        // Setup deviceorientation listener (if it is available)
        window.addEventListener( 'deviceorientation', function( e ) {
            // Don't use unless we have a 3-axis implementation of device orientation
            if ( e.alpha === null || e.alpha === undefined ) {
                self.currentOrientationAngle = 0;
                return;
            }
 
            // set orientation angle to nearest 90 degrees
            self.currentOrientationAngle = Math.round( -e.gamma / 90) * 90;
 
            // correction for holding the device upside down
            if ( self.currentOrientationAngle == 0 && e.beta < 0 ) {
                self.currentOrientationAngle = 180;
            }
 
        }, true );
 
        this.manualOrientationChange = function() {
 
            // landscape when width is biggest, otherwise portrait
            self.currentOrientationState = ( window.innerWidth > window.innerHeight ) ? 'landscape': 'portrait';
 
            if (  ( self.currentOrientationState !== self.lastOrientationState ) ||
                    ( self.lastOrientationAngle === -2 && self.currentOrientationAngle !== -1 ) ||
                        ( self.currentOrientationAngle !== 0 && self.currentOrientationAngle === -self.lastOrientationAngle )  ) {
 
                if ( self.currentOrientationAngle === -1 ) self.currentOrientationAngle = 0;
 
                // Update static window.orientation value
                window.orientation = self.currentOrientationAngle;
 
                // Create and dispatch pseudo-orientationchange event
                var orientationEvent = window.document.createEvent( 'Event' );
                orientationEvent.initEvent( 'orientationchange', true, true );
                orientationEvent.orientation = this.currentOrientationAngle;
                orientationEvent.mode = this.currentOrientationState;
                window.dispatchEvent( orientationEvent );
 
                // Fire event to window.onorientationchange assigned handler (if any)
                if ( typeof window.onorientationchange == 'function' ) {
                    window.onorientationchange.call( this, orientationEvent );
                }
 
                // Check for onorientationevent handler on body element and execute
                var body = document.body;
                if( body && body.getAttribute('onorientationchange')) {
                    // Create new script and run function
                    var onorientationchange_script = document.createElement('script');
                    onorientationchange_script.type = "text/javascript";
                    onorientationchange_script.textContent = "//<![CDATA[\n" + body.getAttribute('onorientationchange') + "\n//]]>";
                    body.appendChild(onorientationchange_script);
                    onorientationchange_script.parentNode.removeChild( onorientationchange_script );
                }
 
                self.lastOrientationAngle = self.currentOrientationAngle;
                self.lastOrientationState = self.currentOrientationState;
 
            }
 
            window.requestAnimationFrame( self.manualOrientationChange.bind( self ) );
 
        };
 
        this.manualOrientationChange();
 
    };
 
    //*** WINDOW EVENTLISTENER SHIM
    var orientationHandler = new cOrientationChange();
 
    window.orientation = orientationHandler.currentOrientationAngle === -1 ? 0: orientationHandler.currentOrientationAngle;
 
    window.onorientationchange = function( e ) {};
 
})( window );


// apply window orientation shim to prevent mobile safari (or any simulators) from entering landscape by
// reverse-rotating the window during the resize or orientation-change events
$(window).bind('orientationchange resize', function(event){
  if (event.orientation || window.orientation) {
    var orientation = event.orientation || window.orientation;
    if (orientation == 'landscape') {
      if (window.rotation == 90) {
        rotate(this, -90);
      } else {
        rotate(this, 90);
      }
    }
  }
});

function rotate(el, degs) {
  iedegs = degs/90;
  if (iedegs < 0) iedegs += 4;
  transform = 'rotate('+degs+'deg)';
  iefilter = 'progid:DXImageTransform.Microsoft.BasicImage(rotation='+iedegs+')';
  styles = {
    transform: transform,
    '-webkit-transform': transform,
    '-moz-transform': transform,
    '-o-transform': transform,
    filter: iefilter,
    '-ms-filter': iefilter
  };
  $(el).css(styles);
}

%>

<div id="rotateContainer" style="background-image: url(<%= assetUrl('media/mobile_tutorial_turnphone.png') %>)">
  <div id="rotateText">
    <p><%= msg.rotateText() %><br><%= msg.orientationLock() %></p>
  </div>
</div>

<% var instructions = function() { -%>
  <div id="bubble" class="clearfix">
    <table id="prompt-table">
      <tr>
        <td id="prompt-icon-cell">
          <img id="prompt-icon"/>
        </td>
        <td id="prompt-cell">
          <p id="prompt">
          </p>
        </td>
      </tr>
    </table>
    <div id="ani-gif-preview-wrapper">
      <div id="ani-gif-preview">
        <img id="play-button" src="<%= assetUrl('media/play-circle.png') %>"/>
      </div>
    </div>
  </div>
<% }; -%>

<% // A spot for the server to inject some HTML for help content.
var helpArea = function(html) { -%>
  <% if (html) { -%>
    <div id="helpArea">
      <%- html %>
    </div>
  <% } -%>
<% }; -%>

<div id="visualizationColumn">
  <div id="visualization">
    <%- data.visualization %>
  </div>

  <div id="belowVisualization">

    <div id="gameButtons">
      <button id="runButton" class="launch blocklyLaunch <%= hideRunButton ? 'invisible' : ''%>">
        <div><%= msg.runProgram() %></div>
        <img src="<%= assetUrl('media/1x1.gif') %>" class="run26"/>
      </button>
      <button id="resetButton" class="launch blocklyLaunch" style="display: none">
        <div><%= msg.resetProgram() %></div>
        <img src="<%= assetUrl('media/1x1.gif') %>" class="reset26"/>
      </button>
      <% if (data.controls) { %>
      <%- data.controls %>
      <% } %>
      <% if (data.extraControlRows) { %>
      <%- data.extraControlRows %>
      <% } %>
    </div>

    <% instructions() %>
    <% helpArea(data.helpHtml) %>

  </div>
</div>

<% if (data.editCode) { %>
  <div id="codeWorkspace">
<% } else { %>
  <div id="blockly">
<% } %>
  <div id="headers" dir="<%= data.localeDirection %>">
    <div id="toolbox-header" class="blockly-header"><span><%= msg.toolboxHeader() %></span></div>
    <div id="workspace-header" class="blockly-header">
      <span id="workspace-header-span"><%= msg.workspaceHeader()%> </span>
      <div id="blockCounter">
        <div id="blockUsed" class=<%= data.blockCounterClass %>>
          <%= data.blockUsed %>
        </div>
        <span>&nbsp;/</span>
        <span id="idealBlockNumber"><%= data.idealBlockNumber %></span>
      </div>
    </div>
    <div id="show-code-header" class="blockly-header"><span><%= msg.showCodeHeader() %></span></div>
  </div>
  <% if (data.editCode) { %>
    <div id="codeTextbox" contenteditable spellcheck=false></div>
  <% } %>
</div>

<div class="clear"></div>
